% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_deeptools.R
\name{run_deeptools}
\alias{run_deeptools}
\title{Run Deeptools}
\usage{
run_deeptools(
  command = NULL,
  input = NULL,
  control = NULL,
  output = NULL,
  sample.names = NULL,
  gtf = NULL,
  before.region = NULL,
  region.bases = NULL,
  after.region = NULL,
  plotType = NULL,
  kmeans = NULL,
  effective.genome.size = NULL,
  normalization = NULL,
  scale.factors = NULL,
  threads = 10,
  parallel = FALSE,
  cores = 4,
  execute = TRUE,
  deeptools = NULL,
  version = FALSE
)
}
\arguments{
\item{command}{deeptools command to run, at present can choose from
bamCoverage, computeMatrix and plotHeatmap, required}

\item{input}{List of files to be processed, required}

\item{control}{List of input control files, for bamCompare only}

\item{output}{Name of output direcotry}

\item{sample.names}{list of the sample name}

\item{gtf}{Path to the gtf file}

\item{before.region}{Distance upstream of the reference-point selected}

\item{region.bases}{Distance in bases to which all regions will be fit}

\item{after.region}{Distance downstream of the reference-point selected}

\item{plotType}{Type of plot can select lines, fill, se, std,
overlapped_lines or heatmap}

\item{kmeans}{Number of kmeans clusters to compute.}

\item{effective.genome.size}{The effective genome size is the portion of the
genome that is mappable. Large fractions of the genome are stretches of
NNNN that should be discarded. A table of values is available here:
http://deeptools.readthedocs.io/en/latest/content/feature/effectiveGenomeSize.html}

\item{normalization}{Possible choices: RPKM (Reads Per Kilobase per Million
mapped reads), CPM (Counts Per Million mapped reads), BPM (Bins Per Million
mapped reads, similar to TPM), RPGC (reads per genomic content)}

\item{scale.factors}{Method to use to scale the samples. Possible choices: readCount, SES and None}

\item{threads}{Number of threads for each instance of deeptools to use,
default set to 10}

\item{parallel}{Run in parallel, default set to FALSE}

\item{cores}{Number of cores/threads to use for parallel processing, default
set to 4}

\item{execute}{Whether to execute the commands or not, default set to TRUE}

\item{deeptools}{Path to the where the deeptools programs are sorted (usually
/usr/local/bin), required}

\item{version}{Returns the version number}
}
\value{
A list with the deeptools commands
}
\description{
Runs the deeptools suite of programs
}
\examples{
\dontrun{
path <- "/usr/local/bin/"

# Version
command <- "deeptools"

deeptools.cmd <- run_deeptools(command = command,
                               deeptools.path = path,
                               version = TRUE)
deeptools.cmd

# Bam to bigwig
command <- "bamCoverage"
input.names <- "list of input file paths"
output.dir <- "directoryname"
output.names <- "list of names for samples"

deeptools.cmd <- run_deeptools(command = command,
                               input = input,
                               output = output,
                               sample.names = sample.names,
                               deeptools = path)
deeptools.cmd

# Bigwig to matrix
command <- "computeMatrix"
gtf <- "path/to/gtf"
input.names <- "list of input file paths"
output.dir <- "directoryname"
output.names <- "list of names for samples"

deeptools.cmd <- run_deeptools(command = command,
                               input = matrix.lists,
                               output = output,
                               sample.names = output.names,
                               gtf = gtf,
                               # parallel = TRUE,
                               # cores = 6,
                               deeptools = path)
deeptools.cmd

# plot heatmap
command <- "plotHeatmap"
input.names <- "list of input file paths"
output.dir <- "directoryname"
output.names <- "list of names for samples"

deeptools.cmd <- run_deeptools(command = command,
                               input = input.names,
                               output = output.dir
                               sample.names = output.names,
                               # parallel = TRUE,
                               # cores = 6,
                               deeptools = path)
deeptools.cmd
}
}
